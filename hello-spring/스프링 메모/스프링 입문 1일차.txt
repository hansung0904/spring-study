스프링을 왜 학습해야하는가?
    -   우리는 실무에서 제대로 동작하는 웹 어플리케이션을 만들기 위해
개발자는 직접 코딩하면서 동작하는 웹 어플리케이션을 만들어 볼 때 가장 빨리 배운다.

학습하면서 프로젝트 사용기술로는
    - Spring Boot, JPA, Gradle, Hibernate, Thymeleaf

강의 목표 :
    -   스프링 학습의 제대로 된 첫 길잡이 역할
    -   스프링 기술 그 자체에 매몰 x
    -   어떻게 사용해야 하는지에 초점
    -   오래된 스프링 기술 x
    -   마이너한 스프링 기술 x
학습방법 :
    -   처음부터 끝까지 직접 코딩합니다.

스프링 완전 정복 로드맵 :
    -   스프링 입문
    -   스프링 핵심 원리
    -   스프링 웹 MVC
    -   스프링 DB데이터 접근 기술
    -   실전! 스프링 부트

요즘은 다 웹으로 개발하기 때문에 스프링 웹 MVC는 굉장히 중요하다.
    -   웹과 관련된 기술전반, 스프링과 관련된 전반을 다 설명

스프링을 가지고 DB데이터에 접근하는 다양한 기술들 어떤게 best 방법인지?

요즘은 다 스프링부트를 실무에서 적용해서 사용한다.
    -   스프링부트는 엄청 거대하지만 실무위주로 설명하겠다.

요즘은 start.spring.io (스프링 부트 스타터 사이트로 스프링 만든다.)

----------------------------------------------------------------------

프로젝트 gradle로 빌드 한 후

빨간색 폴더모양 표시는 무시

gradle -> wrapper

src -> main -> java 메인이라는 폴더와 테스트라는 폴더는 기본적으로 나누어지고있다.
src -> test -> test 테스트 코드라는게 정말 중요하다.
resources -> java 파일을 제외한 모든 파일들이 대부분 들어가져있다.

*build.gradle*
    ->  옛날에는 build.gradle 파일을 한땀한땀 다 직접 쳐서 넣었어야했다.

gradle이 버전설정하고 라이브러리 땡겨오는구나 정도로만 이해하자 (지금은)
sourceCompatibility -> java 버전을 나타내주고있음.

dependencies
    ->  웹프로젝트, Thymeleaf 설정해준게 들어가져 있음.
    -> testlibrary가 기본적으로 들어가져있음.

이러면 생기는 궁금증 ?
    ->  이 라이브러리를 어디선가 다운받아야하는데??
        --> mavenCentral()이라는 사이트에서 다운받아준다 그걸 repositories에서 설정해준것.

Git에는 정말 필요한 소스코드들만 올라가야하고 빌드된 결과물같은것들은 올라가면 안되기때문에
gitignore 파일은 중요하다.


초기 main method를 실행하게되면 SpringApplication.run 해서 클래스를 넣어주면
@SpringBootApplication 어노테이션이 실행되면서 내장되어있는 tomcat이 실행되어지게된다.(자체적으로 띄워버림)

Sysout을 사용하면 안되는 이유
    ->  log를 남겨놔야 심각한 에러만 따로 모아둘 수 있고, 로그파일들이 관리가 된다.

slf4j 는 쉽게 말해서 interface이고

실제 로그를 어떤 구현체로 출력할거야??라고 해서 logback을 많이 사용한다.
    ->  성능도 빠르고 여러가지 지원하는기능도 되게 좋다.

Spring에서도 logback과 slf4j를 표준으로 쓰겠다라고 해서 Spring-boot-starter-logging을 땡기면
자동으로 들어가져있다.

Spring Boot는 생태계 자체를 감싸서 편리하게 사용할 수 있도록 도와준다.
    ->  Java Enterprise web application 개발과 관련된 전반의 생태계를 다 제공한다
        ->> 그래서 어마어마하게 크다.


welcompage 어떻게 하지 ?
    -> spring.io 에 들어감
        ->> pj에 스프링부트라고 있음 learn 가보면 각 버전 reference document에 들어가자
            ->>> index.html이라고 치면 welcome page라고 뜸
                ->>>> 공식 document보는 연습을 하자.

메뉴얼에서 검색을 할 수 있어야한다.(doc보는 연습을 하자 javadoc도 마찬가지)

스프링 웹 개발 기초
    -> 1. 정적 컨텐츠 : 서버에서 하는 거 없이 파일을 웹 브라우저에 그대로 내려줌
    -> 2. MVC와 템플릿 엔진 : 과거의 JSP , PHP들이 소위 말하는 Template Engine HTML을 동적으로 바꿔서 내려줌. 모델 뷰 컨트롤러라고함.
        ->> 정적컨텐츠와의 차이 : 파일을 그대로 고객한테 전달
                                 MVC와 템플릿 엔진은 서버에서 변형을 해서 HTML을 바꿔서 내려주는 방식
    -> 3. API : JSON이라는 데이터(구조) 포멧으로 클라이언트한테 데이터를 전달하는 방식이다.
        ->> VIEW나 REACT vue.js를 쓸때도 API로 데이터만 내려주면 화면을 클라이언트가 알아서 그리고 정리하는 그런 방식
            또는 서버끼리 통신할때

MVC와 템플릿 엔진
    ->  MVC : Model, View, Controller (예전에는 jsp를 가지고 view다가 전부다 작업을 했다.)
        왜? View는 화면을 그리는데 모든 역량을 집중해야한다.
            Controller는 비즈니스 로직이과 관련이 있구나 뭔가 내부적인걸 처리하는데 집중해야한다.

    요즘 방식은 view controller를 쪼개는게 당연한거고 기본적으로 해야하는 것.


Jakson이란 ?
    -> 객체를 JSON으로 바꿔주는 library이다. 스프링은 기본적으로 Jakson 라이브러리가 탑재되어있다.

TestCode는 의존관계없이 설계되어져야한다.











