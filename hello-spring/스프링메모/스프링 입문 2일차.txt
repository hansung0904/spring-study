스프링을 우리는 왜 쓰는가?
    ->  객체지향 설계가 좋아서
        ->> 근데 객체지향 설계가 왜 좋은가?
            ->>> 다형성을 활용 interface를 두고 구현체를 바꿔끼워넣을 수 있다.
                 dependencyInjection 덕분에 굉장히 편해졌다. SpringContainer가 해줌.

    -> 기존의 코드는 건드리지 않고 어셈블리해서 실제 application에 관련된 코드는 하나도 손 댈 필요가 없어진다.

개방 - 폐쇄 원칙(OCP, Open-Closed Principle)
    -> 확장에는 열려있고, 수정에는 닫혀있다.

스프링의 DI(Dependencies Injection)을 사용하면 * 기존 코드를 수정하지 않고 설정만으로 구현 클래스를 변경 * 할 수 있다.

객체지향의 진짜 매력은?
    -> * 기존 코드를 수정하지 않고 설정만으로 구현 클래스를 변경 * 할 수 있다.

데이터베이스는 기본적으로 트랜잭션이라는 개념이 있다.
    -> 그래서 DB에 insert Query를 해준다음에 commit을 해줘야 DB에 반영이됨

단위테스트
    -> 순수한 자바코드, 최소한의단위로 테스트 케이스 작성

통합테스트
    -> Spring 컨테이너 ,DB연동까지 하는 걸 통합테스트

가급적이면 순수한단위테스트가 훨씬 좋은 테스트일 확률이 높다.
    -> 단위단위로 잘 쪼개서 테스트 할 수 있는 능력을 갖추도록 노력하자.
    -> 스프링 컨테이너 없이 테스트를 잘 할 수 있는 훈련을 해야한다.

JPA
    -> JPA는 기본의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
    -> JPA를 사용하면, SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임 전환을 할 수 있다.
    -> JPA를 사용하면 개발 생산성을 크게 높일 수 있다.

spring.jpa.show-sql=true -> JPA가 날리는 SQL을 볼 수 있음.

    -> JPA는 interface다 (interface만 제공)
    -> 그 구현체로 hibernate 등 구현기술들이 있다.
    -> 자바 진영의 표준 interface
    -> JPA는 ORM이라는 기술 (object relational mapping)
        ->> mapping은 어떻게 해?
            ->>> annotation으로 해준다.

스프링 데이터 JPA
    -> 스프링 부트와 JPA만 사용해도 개발 생산성이 정말 많이 증가하고, 개발해야할 코드도 확연히 줄어든다.
    -> 스프링 데이터 JPA를 사용하면, 기존의 한계를 넘어 마치 마법처럼, 리포지토리에 구현 클래스 없이 인터페이스만으로 개발을 완료할 수 있다.
    -> 반복 개발해온 기본 CRUD기능도 스프링 데이터 JPA가 모두 제공한다.
    -> 스프링 부트와 JPA라는 기반 위에, 스프링 데이터 JPA라는 환상적인 프레임워크를 더하면 개발이 정말 즐거워질 수 있다.
    -> 지금까지 조금이라도 단순하고 반복이라 생각했던 개발 코드들이 확연하게 줄어든다.
        ->> 따라서 개발자는 핵심 비즈니스 로직을 개발하는데, 집중할 수 있다.
    -> 실무에서 RDBMS를 사용한다면 스프링 데이터 JPA는 이제 선택이 아니라 필수라는 점이다.

* 주 의 *
    -> 스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술이다.
        ->> 따라서 JPA를 먼저 학습한 후에 스프링 데이터 JPA를 학습해야 한다.

AOP
    -> AOP가 필요한 상황
        ->> 모든 메소드의 호출 시간을 측정하고 싶다면?
        ->> 공통 관심사항 (cross-cutting concern) vs 핵심 관심 사항(core concern)
        ->> 회원가입 시간, 회원 조회 시간을 측정하고 싶다면?

AOP를 적용해보자
    ->  AOP : AspectOriented Programming
    -> 공통관심사항(cross-cutting concern) vs 핵심 관리 사항(core concern) 분리






