스프링을 우리는 왜 쓰는가?
    ->  객체지향 설계가 좋아서
        ->> 근데 객체지향 설계가 왜 좋은가?
            ->>> 다형성을 활용 interface를 두고 구현체를 바꿔끼워넣을 수 있다.
                 dependencyInjection 덕분에 굉장히 편해졌다. SpringContainer가 해줌.

    -> 기존의 코드는 건드리지 않고 어셈블리해서 실제 application에 관련된 코드는 하나도 손 댈 필요가 없어진다.

개방 - 폐쇄 원칙(OCP, Open-Closed Principle)
    -> 확장에는 열려있고, 수정에는 닫혀있다.

스프링의 DI(Dependencies Injection)을 사용하면 * 기존 코드를 수정하지 않고 설정만으로 구현 클래스를 변경 * 할 수 있다.

객체지향의 진짜 매력은?
    -> * 기존 코드를 수정하지 않고 설정만으로 구현 클래스를 변경 * 할 수 있다.

데이터베이스는 기본적으로 트랜잭션이라는 개념이 있다.
    -> 그래서 DB에 insert Query를 해준다음에 commit을 해줘야 DB에 반영이됨

단위테스트
    -> 순수한 자바코드, 최소한의단위로 테스트 케이스 작성

통합테스트
    -> Spring 컨테이너 ,DB연동까지 하는 걸 통합테스트

가급적이면 순수한단위테스트가 훨씬 좋은 테스트일 확률이 높다.
    -> 단위단위로 잘 쪼개서 테스트 할 수 있는 능력을 갖추도록 노력하자.
    -> 스프링 컨테이너 없이 테스트를 잘 할 수 있는 훈련을 해야한다.