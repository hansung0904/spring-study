인터넷 네트워크

-> 인터넷 통신
-> IP(Internet Protocol)
-> TCP,UDP
-> PORT
-> DNS

IP
-> 인터넷 프로토콜 역할
    ->> 지정한 IP주소(IP Address)에 데이터 전달
    ->> 패킷(packet)이라는 통신 단위로 데이터 전달

IP 프로토콜의 한계
-> 비연결성
    ->> 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송
-> 비신뢰성
    ->> 중간에 패킷이 사라지면?
    ->> 패킷이 순서대로 오지않으면?
-> 프로그램 구분
    ->> 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면?

인터넷 프로토콜 스택의 4계층
-> 애플리케이션 계층 - HTTP,FTP
-> 전송계층 - TCP,UDP
-> 인터넷계층 - IP
-> 네트워크 인터페이스 계층

프로토콜 계층
1. 프로그램이 Hello, world! 메시지 생성
2. SOCKET 라이브러리를 통해 전달
3. TCP 정보 생성, 메시지 데이터 포함
4. IP 패킷 생성, TCP데이터 포함

TCP 특징
전송 제어 프로토콜(Transmission Control Protocol)
-> 연결지향 - TCP 3 way handshake(가상연결)
-> 데이터 전달 보증
-> 순서 보장
-> 신뢰할 수 있는 프로토콜
-> 현재는 대부분 TCP를 사용

TCP 3 way handshake
          1.SYN
클라이언트 -----> 서버
     2.SYN+ACK
서버 ------------> 클라이언트
         3. ACK
클라이언트 ------------> 서버

SYN : 접속 요청
ACK : 요청 수락
참고: 3. ACK와 함께 데이터 전송 가능

데이터 전달 보증
클라이언트 -----------> 서버
         1.데이터 전송
서버      -----------> 클라이언트
         2. 데이터 잘 받았음

순서 보장

1. 패킷1, 패킷2, 패킷3 순서로 전송                    2. 패킷1, 패킷3, 패킷2 순서로 도착
클라이언트 ----------------------------------------> 서버
서버 -------------------------------------------> 클라이언트
         3. 야 패킷2부터 다시 보내

UDP 특징
사용자 데이터그램 프로토콜(User Datagram Protocol)
-> 하얀 도화지에 비유(기능이 거의 없음)
-> 연결지향 - TCP 3 way handshake X
-> 데이터 전달 보증 X
-> 순서 보장 X
-> 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠르다.
정리
    ->> IP와 거의 같다 + PORT + 체크섬 정도만 추가.
    ->> 애플리케이션에서 추가 작업 필요

PORT
한번에 둘 이상 연결해야하면 어떡해?
-> 같은 IP 내에서 프로세스를 구분
-> 0 ~ 65535 할당 가능
-> 0 ~ 1023 : 잘 알려진 포트, 사용하지 않는 것이 좋다.
    -> FTP - 20,21
    -> TELNET - 23
    -> HTTP - 80 (우리가 흔히 사용하는 80포트)
    -> HTTPS - 443

DNS
IP는 기억하기가 어렵다.
IP는 변경될 수 있다.

DNS = Domain Name System
-> 실생활에서의 전화번호부 기능
-> 도메인 명을 IP주소로 변환

DNS 사용
클라이언트가 도메인 명을 DNS 서버에 요청 -> DNS 서버는 200.200.200.2로 응답
클라이언트는 200.200.200.2를 서버로 접속

인터넷 네트워크 정리
-> 인터넷 통신
-> IP(Internet Protocol)
-> TCP,UDP
-> PORT
-> DNS