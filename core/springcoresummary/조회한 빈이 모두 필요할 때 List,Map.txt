조회한 빈이 모두 필요할때 List,Map
의도적으로 정말 해당 타입의 스프링 빈이 다 필요한 경우도 있다.
예를 들어서 할인 서비스를 제공하는데, 클라이언트가 할인의 종류(rate,fix)를 선택할 수 있다고
가정해보자. 스프링을 사용하면 소위 말하는 전략 패턴을 매우 간단하게 구현할 수 있다.

로직 분석
DisCountService는 Map으로 모든 DiscountPolicy를 주입받는다. 이때 fixDiscountPolicy, rateDiscountPolicy가 주입된다.
discount() 메서드는 discountCode로 "fixDiscountPolicy"가 넘어오면 Map에서 fixDiscountPolicy 스프링 빈을 찾아서
실행한다. 물론 "rateDiscountPolicy"가 넘어오면 rateDiscountPolicy 스프링 빈을 찾아서 실행한다.

주입 분석
Map<String, DiscountPolicy> : map의 키에 스프링 빈의 이름을 넣어주고, 그 값으로 DiscountPolicy타입으로
조회한 모든 스프링 빈을 담아준다.
List<DiscountPolicy> : DiscountPolicy타입으로 조회한 모든 스프링 빈을 담아준다.
만약 해당하는 타입의 스프링 빈이 없으면, 빈 컬렉션이나 Map을 주입한다.

참고 - 스프링 컨테이너를 생성하면서 스프링 빈 등록하기
스프링 컨테이너는 생서자에 클래스 정보를 받는다. 여기에 클래서 정보를 넘기면 해당 클래스가 스프링
빈으로 자동 등록된다.
new AnnotationConfigApplicaitonContext(AutoAppConfig.class, DiscountPolicy.class);

이 코드는 2가지로 나누어 해석할 수 있음.
new AnnotationConfigApplicationContext()르 통해 스프링 컨테이너를 생성한다.
AutoAppConfig, DiscountService.class를 파라미터로 넘기면서 해당 클래스를 자동으로 스프링 빈으로 등록한다.
정리하면 스프링 컨테이너를 생성하면서, 해당 컨테이너 동시에 AutoAppConfig, DiscountService를 스프링 빈으로 자동 등록한다.

자동, 수동의 올바른 실무 운영 기준
편리한 자동 기능을 기본으로 사용하자
그러면 어떤 경우에 컴포넌트 스캔과 자동주입을 사용하고, 어떤 경우에 설정 정보를 통해서 수동으로 빈을 등록하고,
의존관계도 수동으로 주입해야할까 ?

결론부터 이야기하면, 스프링이 나오고 시간이 갈 수록 점점 자동을 선호하는 추세이다. 스프링은
@Component 뿐만 아니라 @Controller, @Service, @Repository 처럼 계층에 맞추어 일반적인
애플리케이션 로직을 자동으로 스캔할 수 있도록 지원한다. 거이에 더해서 최근 스프링 부트는 컴포넌트
스캔을 기본으로 사용하고, 스프링 부트의 다양한 스프링 빈들도 조건이 맞으면 자동으로 등록하도록 설계했다.