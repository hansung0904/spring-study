* 스프링 컨테이너 *
-> ApplicationContext를 스프링 컨테이너라 한다.
-> 기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 DI를 했지만, 이제부터는 스프링 컨테이너를 통해서 사용한다.
-> 스프링 컨테이너는 @Configuration 이 붙은 AppConfig를 설정(구성)정보로 사용한다. 여기서 @Bean 이라 적힌 메서드를
   모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다. 이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
-> 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다. (memberService, orderService)
-> 이전에는 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만, 이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈(객체)를 찾아야한다.
   스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.
-> 기존에는 개발자가 직접 자바코드로 모든것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고, 스프링 컨테이너에서 스프링 빈을 찾아서
   사용하도록 변경되었다.

-> 코드가 약간 더 복잡해진거같은데 어떤 장점들이 있을까?
    ->> 어마어마하 장점들이 있다 천천히 따라가보자

컨테이너에 등록된 모든 빈 조회
-> 모든 빈 출력하기
    ->> 실행하면 스프링에 등록된 모든 빈 정보를 출력할 수 있다.
    ->> ac.getBeanDefinitionNames() : 스프링에 등록된 모든 빈 이름을 조회한다.
-> 애플리케이션 빈 출력하기
    ->> 스프링이 내부에서 사용하는 빈은 제외하고, 내가 등록한 빈만 출력해보자.
    ->> 스프링이 내부에서 사용하는 빈은 getRole()로 구분할 수 있다.
        ->>> ROLE_APPLICATION : 일반적으로 사용자가 정의한 빈
        ->>> ROLE_INFRASTURCTURE : 스프링이 내부에서 사용하는 빈

스프링 빈 조회 - 기본

    스프링 컨테이너에서 스프링 빈을 찾는 가장 기본적인 조회 방법
    -> ac.getBean(빈이름, 타입
    -> ac.getBean(타입)
    -> 조회 대상 스프링 빈이 없으면 예외 발생
        ->> NoSuchBeanDefinitionException : No bean named 'xxxxx' available

스프링 빈 조회 - 동일한 타입이 둘 이상

-> 타입으로 조회시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다. 이때는 빈 이름을 지정하자.
-> ac.getBeansOfType() 을 사용하면 해당 타입의 모든 빈을 조회할 수가 있다.

* 중 요 *
스프링 빈 조회 - 상속관계

-> 부모타입으로 조회하려면, 자식 타입도 함께 조회한다.
-> 그래서 모든 자바 객체의 최고 부모인 Object 타입으로 조회하면, 모든 스프링 빈을 조회한다.