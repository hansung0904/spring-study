회원 도메인 설계의 문제점
    -> 이 코드의 설계상 문제점은 무엇인가?
    -> 다른 저장소로 변경할 때 OCP 원칙을 잘 준수할까?
    -> DIP를 잘 지키고 있을까요?
    -> 의존관계가 인터페이스 뿐만 아니라 구현까지 모두 의존하는 문제점이 있음.
        ->> 주문까지 만들고나서 다시 한 번 해결방안을 모색해보자.

새로운 할인 정책 개발
    -> 새로운 할인 정책을 확장해보자

    -> 기획자 : 서비스 오픈 직전에 할인 정책을 바꾸려고한다.
    -> 개발자 : 처음부터 고정 할인 금액은 아니라고 함
    -> 기획자 : 애자일 소프트웨어 개발 선언 몰라요 ? "계획을 따르다기보다 변화에 대응하기를"
    -> 개발자 : ...(유연한 설계가 가능하도록 객체지향 원칙을 준수함 ㅅㄱ ㅋㅋ)

방금 추가한 할인 정책을 어플리케이션에 적용해보도록 하자.

관심사의 분리
    -> 애플리케이션을 하나의 공연이라고 생각해보자 각각의 인터페이스를 배역이라 생각해보자 그런데! 실제 배역에 맞는 배우를
       선택하는 것은 누가하나?
    -> 로미오와 줄리엣 공연을 하면 로미오 역할을 누가 할지 줄리엣 역할을 누가 할지는 배우들이 정하는게 아니다.
    -> 이전 코드는 마치 로미오 역할을 하는(인터페이스) 레오나르도 디카프리오 (구현체,배우)가 줄리엣 역할(인터페이스)을 하는 여자 주인공(구현체, 배우)
       을 직접 초빙하는것과 같다. 디카프리오는 공연도 해야하고 동시에 여자 주인공도 공연에 직접 초빙해야하는 *다양한 책임*을 가지고 있다.

       **관심사를 분리하자**
    -> 배우는 본인의 역할인 배역을 수행하는 것에만 집중해야 한다.
    -> 디카프리오는 어떤 여자 주인공이 선택되더라도 똑같이 공연을 할 수 있어야 한다.
    -> 공연을 구성하고, 담당 배우를 섭외하고, 역할에 맞는 배우를 지정하는 책임을 담당하는 별도의 *공연 기획자*가 나올시점임.
    -> 공연 기획자를 만들고, 배우와 공연 기획자의 책임을 확실히 분리해보도록하자.

AppConfig의 등장
    -> 애플리케이션의 전체 동작 방식을 구성(config)하기 위해 *구현객체를생성*하고 *연결*하는 책임을 가지는 별도의 설정 클래스를 만들자.

정리
    -> AppConfig를 통해서 관심사를 확실하게 분리했다.
    -> 배역, 배우를 생각해보자
    -> AppConfig는 공연 기획자이다.
    -> AppConfig는 구체 클래스를 선택한다. 배역에 맞는 담당 배우를 선택한다. 애플리케이션이 어떻게 동작해야 할지 전체 구성을 책임진다.
    -> 이제 각 배우들은 담당 기능을 실행하는 책임만 지면 된다.
    -> OrderServiceImpl 은 기능을 실행하는 책임만 지면 된다.

새로운 구조와 할인 정책 적용
    -> 처음으로 돌아가서 정액 할인 정책을 정률% 할인 정책으로 수정해보자
    -> FixDiscountPolicy ➡ RateDiscountPolicy
    -> 어떤 부분만 변경하면 될까?
       ->> AppConfig 부분의 구성영역에서만 고쳐주면되고 사용영역에서는 전혀 고쳐줄 필요가 없다.

** 전체 흐름 정리 **
    지금까지의 흐름을 정리해보자

-> 새로운 할인 정책 개발
-> 새로운 할인 정책 적용과 문제점
-> 관심사의 분리
-> AppConfig 리팩토링
-> 새로운 구조와 할인 정책 적용

    * 새로운 할인 정책 개발 *
    -> 다형성 덕분에 새로운 정률 할인 정책 코드를 추가로 개발하는것 자체는 아무 문제가 없음

    * 새로운 할인 정책 적용과 문제점 *
    -> 새로 개발한 정률 할인 정책을 적용하려고 하니 * 클라이언트 코드 * 인 주문 서비스 구현체도 함께 변경해야한다.
    -> 주문 서비스 클라이언트가 인터페이스인 DiscountPolicy 뿐만 아니라 구체 클래스인 FixDiscountPolicy도 함께 의존 ➡ *DIP 위반*

    * 관심사의 분리 *
    -> 애플리케이션을 하나의 공연으로 분리
    -> 기존에는 클라이언트가 의존하는 서버 구현 객체를 직접 생성하고, 실행했다.
    -> 비유를 하면 기존에는 남자 주인공 배우가 공연도 하고, 동시에 여자 주인공도 직접 초빙하는 다양한 책임을 가지고 있다.
    -> 공연을 구성하고, 담당 배우를 섭외하고, 지정하는 책임을 담당하는 별도의 * 공연 기획자 * 가 나올 시점.
    -> 공연 기획자인 AppConfig가 등장
    -> AppConfig는 애플리케이션의 전체 동작 방식을 구성 하기 위해 * 구현 객체를 생성 * 하고 * 연결 * 하는 책임
    -> 이제부터 클라이언트 객체는 자신의 역할을 실행하는 것만 집중, 권한이 줄어듬 (책임이 명확해짐)

    * AppConfig 리팩터링 *
    -> 구성 정보에서 역할과 구현을 분리
    -> 역할이 잘 들어남
    -> 중복 제거

    * 새로운 구조와 할인 정책 적용 *
    -> 정액 할인 정책 ➡ 정률 % 할인 정책으로 변경
    -> AppConfig의 등장으로 애플리케이션이 크게 * 사용 영역 * 과 객체를 생성하고 * 구성(Configuration) 하는 영역 * 으로 분리
    -> 할인 정책을 변경해도 AppConfig가 있는 구성 영역만 변경하면된다. 사용 영역은 변경할 필요가 없다. 물론 클라이언트 코드인 주문 서비스 코드도 변경하지 않아도 된다.

좋은 객체 지향 설계의 5가지 원칙의 적용
    여기서 SRP DIP OCP 적용

SRP 단일 책임 원칙
    -> 한 클래스는 하나의 책임만 가져야 한다.

-> 클라이언트 객체는 직접 구현 개체를 생성하고, 연결하고 ,실행하는 다양한 책임을 가지고 있다.
-> SPR 단일 책임 원칙을 따르면서 관심사를 분리했다.
-> 구현 객체를 생성하고 연결하는 책임은 AppConfig가 담당한다.
-> 클라이언트 객체는 실행하는 책임만 담당한다.

DIP 의존관계 역전 원칙
    -> 프로그래머는 추상화에 의존해야지, 구체화에 의존하면 안된다. 의존관계 주입은 이 원칙을 따르는 방법중 하나다.
-> 새로운 할인 정책을 개발하고, 적용하려고 하니 클라이언트 코드도 함께 변경해야 한다. 왜냐하면 기존 클라이언트 코드
   는 DIP를 지키며 DiscountPolicy 추상화 인터페이스에 의존하는 것 같았지만,
   FixDiscountPolicy 구체화 구현 클래스에도 함께 의존했다.
-> 클라이언트코드가 DiscountPolicy 추상화 인터페이스에만 의존하도록 코드를 변경했다.
-> 하지만 클라이언트 코드는 인터페이스만으로 아무것도 할 수 없다.
-> AppConfig가 FixDiscountPolicy 객체 인스턴스를 클라이언트 코드 대신 생성해서 클라이언트 코드에 의존관계 주입을 했다.
   이렇게 해서 DIP 원칙을 따르면서도 문제도 해결했다.


OCP
    -> 소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀 있어야 한다.
-> 다형성 사용하고 클라이언트가 DIP를 지킴
-> 애플리캐이션을 사용 영역과 구성 영역으로 나눔
-> AppConfig가 의존관계를 FixDiscountPolicy ➡ RateDiscountPolicy 로 변경해서 클라이언트 코드에 주입하므로 클라이언트 코드는 변경하지 않아도 된다.
-> 소프트웨어 요소를 새롭게 확장해도 사용 영역의 변경은 닫혀 있다!


