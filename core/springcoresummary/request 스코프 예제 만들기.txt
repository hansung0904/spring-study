request 스코프 예제 만들기

웹 환경 추가
웹 스코프는 웹 환경에서만 동작하므로 web 환경이 동작하도록 라이브러리를 추가하자.

* 참고 *
`spring-boot-starter-web` 라이브러리를 추가하면 스프링 부트는 내장 톰켓 서버를 활용해서 웹 서버와 스프링을
함께 실행시킨다.

* 참고 *
스프링 부트는 웹 라이브러리가 없으면 우리가 지금까지 학습한 `AnnotationConfigApplicationContext`을 기반으로
애플리케이션을 구동한다. 웹 라이브러리가 추가되면 웹과 관련된  추가 설정과 환경들이 필요하므로
`AnnotationConfigServletWebServerApplicationContext`를 기반으로 애플리케이션을 구현한다.

만약 기본포트인 8080을 다른곳에서 사용중이여서 오류가 발생하면 포트를 변경해주자
`main/resources/application.properties`
server.port = 9090

request 스코프 예제 개발

동시에 여러 HTTP 요청이 오면 정확히 어떤 요청이 남긴 로그인지 구분하기 어렵다.
이럴 때 사용하기 딱 좋은것이 바로 request 스코프이다.

다음과 같이 로그가 남도록 request 스코프를 활용해서 추가 기능을 개발해보자.
[d06b992f...] request scope bean create
[d06b992f...][http://localhost:8080/log-demo] controller test
[d06b992f...][http://localhost:8080/log-demo] service id = testId
[d06b992f...] request scope bean close

-> 기대하는 공통 포멧: [UUID][requestURL] {message}
-> UUID를 사용해서 HTTP요청을 구분하자.
-> requestURL 정보도 추가로 넣어서 어떤 URL을 요청해서 남은 로그인지 확인하자.

---------------------------------------------------------------------------------------
@Component
@Scope(value = "request")
public class MyLogger {

    private String uuid;
    private String requestURL;

    public void setRequestURL(String requestURL) {
        this.requestURL = requestURL;
    }

    public void log(String message) {
        System.out.println("[" + uuid + "]" + "[" + requestURL + "] " + message);
    }

    @PostConstruct
    public void init() {
        uuid = UUID.randomUUID().toString(); // 절대로 겹치지 않음
        System.out.println("[" + uuid + "] request scope bean create: " + this);
    }

    @PreDestroy
    public void close() {
        System.out.println("[" + uuid + "] request scope bean close: " + this);
    }
}
---------------------------------------------------------------------------------------
-> 로그를 출력하기 위한 MyLogger클래스이다.
-> @Scope(value = "request")를 사용해서 request스코프로 지정했다. 이제 이 빈은 HTTP요청 당 하나씩 생성되고, HTTP요청이 끝나는 시점에 소멸된다.
-> 이 빈이 생성되는 시점에 자동으로 @PostConstruct 초기화 메서드를 사용해서 uuid를 생성해서 저장해둔다. 이 빈은 HTTP 요청 당 하나씩 생성되므로, uuid를 저장해두면 다른 HTTP 요청과
   구분할 수 있다.
-> 이 빈이 소멸되는 시점에 @PreDestroy를 사용해서 종료 메시지를 남긴다.
-> requestURL은 이 빈이 생성되는 시점에 알 수 없으므로, 외부에서 setter로 입력받는다.

LogDemoController
-> 로거가 잘 작동하는지 확인하는 테스트용 컨트롤러다.
-> 여기서 HttpServletRequest를 통해서 요청 URl을 받았다.
    ->> requestURL 값 http://localhost:8080/log-demo
-> 이렇게 받은 requestURL값을 myLogger에 저장해둔다. myLogger는 HTTP요청 당 각각 구분되므로
   다른 HTTP 요청 때문에 값이 섞이는 걱정은 하지 않아도 된다.
-> 컨트롤러에서 controller test라는 로그를 남긴다.

참고 : requestURL을 MyLogger에 저장하는 부분은 컨트롤러 보다는 공통 처리가 가능한 스프링 인터셉터나 서플릿 필터 같은 곳을 활용하는 것이 좋다.
      여기서는 예제를 단순화하고, 아직 스프링 인터셉터를 학습하지 않은 분들을 위해서 컨트롤러를 사용했다. 스프링 웹에 익숙하다면 인터셉터를 사용해서
      구현해보도록하자.

LogDemoService 추가
-> 비즈니스 로직이 있는 서비스 계층에서도 로그를 출력해보자
-> 여기서 중요한 점이 있다. request scope를 사용하지 않고 파라미터로 이 모든 정보를 서비스 계층에 넘긴다면, 파라미터가 많아
서 지저분해진다. 더 문제는 requestURL 같은 웹과 관련된 정보가 웹과 관련없는 서비스 계층까지 넘어가게 된다. 웹과 관련된 부분은 컨트롤러까지만
사용해야 한다. 서비스 계층은 웹 기술에 종속되지 않고, 가급적 순수하게 유지하는 것이 유지보수 관점에서 좋다.
-> request scope의 MyLogger 덕분에 이런 부분을 파라미터로 넘기지 않고, MyLogger의 멤버변수에 저장해서 코드와 계층을 깔끔하게 유지할 수 있다.